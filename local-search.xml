<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git基本使用</title>
    <link href="/2021/08/13/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/13/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Git基本使用"><a href="#Git基本使用" class="headerlink" title="Git基本使用"></a>Git基本使用</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="命令行软件"><a href="#命令行软件" class="headerlink" title="命令行软件:"></a>命令行软件:</h3><p>Ubuntu：参考：<a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git <br></code></pre></td></tr></table></figure><p>Windows：<a href="https://git-scm.com/">https://git-scm.com/</a> 下载安装即可<br>可通过以下命令确认是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git --version<br></code></pre></td></tr></table></figure><h3 id="界面管理软件："><a href="#界面管理软件：" class="headerlink" title="界面管理软件："></a>界面管理软件：</h3><p>Ubuntu：<strong>SmartGit</strong><br>Windows：<strong>git tortoise</strong>：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a><br>clion\pycharm：内置了Git管理工具</p><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><p>初始化git仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>实时查看当前仓库状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>配置邮箱和用户名：（整个系统只用配置一次）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.email &quot;xxx@xx.com&quot;<br>git config --global user.name &quot;xxxx&quot;<br></code></pre></td></tr></table></figure><p>将文件变化加入到State舞台（所有文件的增删改）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>将文件变化加入到State舞台（个别文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add 文件名<br></code></pre></td></tr></table></figure><p>提交Stage舞台上的所有变化（所有文件的增删改）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;提交注释&quot;<br></code></pre></td></tr></table></figure><p>查看历史记录：（按q退出）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><p><strong>文件状态说明</strong><br><em><strong>Untracked</strong></em>：未追踪状态（git add . 更新为staged）常见于新添加的文件或目录<br><em><strong>not staged</strong></em>：未记录的变换（git add . 更新为staged）常见于修改、删除文件<br><em><strong>Staged</strong></em>：待提交状态（需要通过 git commit -m “提交注释”）将之提交<br><em><strong>Commited</strong></em>：文件已提交到版本库，会在历史记录中体现<br><img src="https://img-blog.csdnimg.cn/bd3f4dbc69804962b76c6ba57c1de9a7.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyODU0OTU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><p><strong>gitee, github</strong></p><h3 id="远程仓库初始化及push"><a href="#远程仓库初始化及push" class="headerlink" title="远程仓库初始化及push"></a>远程仓库初始化及push</h3><p>1.创建远程仓库<br>2.添加远程仓库的链接，命名为origin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin https://gitee.com/xxx/xxx<br></code></pre></td></tr></table></figure><p>3.将当前分支和远端origin的master进行关联（只需要执行一次）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push --set-upstream origin master<br></code></pre></td></tr></table></figure><p>也可以使用指定的远端分支进行推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin main<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7b10ada9c2424c05a03e5e958ca5f85e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyODU0OTU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="获取远程仓库代码pull"><a href="#获取远程仓库代码pull" class="headerlink" title="获取远程仓库代码pull"></a>获取远程仓库代码pull</h3><p>1.获取已有的远程仓库代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitee.com/xxx/xxx<br></code></pre></td></tr></table></figure><p>2.如果希望获取最新的远程的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull<br></code></pre></td></tr></table></figure><p>3.等同于</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git fetch + git merge<br></code></pre></td></tr></table></figure><h2 id="多人协作开发"><a href="#多人协作开发" class="headerlink" title="多人协作开发"></a>多人协作开发</h2><p>commit、push<br>pull、merge</p><h3 id="冲突产生"><a href="#冲突产生" class="headerlink" title="冲突产生"></a>冲突产生</h3><p>在push之前，远程版本库中有新的提交，本地没有，执行pull，发现其中的新的提交和本地的内容（相同文件的相同行）有差异。产生冲突</p><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><p>git pull 拉取并合并<br>手动，使用界面工具将远程内容和本地内容进行合理的编排，执行命令继续合并过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>fix conflicts and then run “git rebase –continue”<br>执行推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push<br></code></pre></td></tr></table></figure><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><p>查看分支（*处于当前所在分支前面）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch 新建分支名称<br></code></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout 分支名称<br></code></pre></td></tr></table></figure><p>同时创建并切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b 新建分支名称<br></code></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d 删除分支名称<br></code></pre></td></tr></table></figure><p>分支合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge<br>-------<br>git checkout 需要合并到的分支（一会会将别的分支的内容合并到此分支）<br>git merge 需要合并的分支（将此分支内容合并到当前分支）<br></code></pre></td></tr></table></figure><h2 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h2><p>创建标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a 是创建一个带注释的标签，建议使用<br>git tag -a v1.0<br></code></pre></td></tr></table></figure><p>查看标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag<br></code></pre></td></tr></table></figure><p>删除标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag -d 标签名称<br></code></pre></td></tr></table></figure><p>查看此版本所修改内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git show 标签名称<br></code></pre></td></tr></table></figure><h2 id="Git-版本回退"><a href="#Git-版本回退" class="headerlink" title="Git 版本回退"></a>Git 版本回退</h2><p>查看提交日志,每一次提交都有对应的 *<strong>commit id*</strong> 和 ***commit message***。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br><span class="hljs-meta">#</span><span class="bash"> 提交的信息会在一行显示</span><br>git log --pretty=oneline<br></code></pre></td></tr></table></figure><p>根据id会退到指定的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard id(根据日志，可以查看到id号)<br></code></pre></td></tr></table></figure><p>查看命令操作的历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>生产工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
