<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于hexo+Github/Gitee创建个人网站</title>
    <link href="/2021/08/13/%E5%9F%BA%E4%BA%8Ehexo-Github-Gitee%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2021/08/13/%E5%9F%BA%E4%BA%8Ehexo-Github-Gitee%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="创建博客前置需求"><a href="#创建博客前置需求" class="headerlink" title="创建博客前置需求"></a>创建博客前置需求</h1><ul><li>已经安装了gitbash</li><li>会使用gitbash</li><li>已经配置好SSH</li><li>已经安装Node.js</li><li>会使用npm</li></ul><p>如果不会的话可以点后面的链接去学习。</p><h1 id="开始创建博客"><a href="#开始创建博客" class="headerlink" title="开始创建博客"></a>开始创建博客</h1><h2 id="1-创建博客"><a href="#1-创建博客" class="headerlink" title="1 创建博客"></a>1 创建博客</h2><h3 id="1-1安装hexo"><a href="#1-1安装hexo" class="headerlink" title="1.1安装hexo"></a>1.1安装hexo</h3><p>全局安装hexo-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fsQ63Q"><img src="https://z3.ax1x.com/2021/08/13/fsQ63Q.png" alt="fsQ63Q.png"></a></p><p>安装完成就能看到绿框里的东西了。<br>治愈那两个警告不用管它，因为fsevent是mac osx的，在Windows或者Linux下会有警告，忽略即可。</p><h3 id="1-2创建好博客文件夹"><a href="#1-2创建好博客文件夹" class="headerlink" title="1.2创建好博客文件夹"></a>1.2创建好博客文件夹</h3><p><strong>1.创建</strong><br>有两种方法：</p><ul><li><p>进入你要建博客的文件夹</p><p>1.打开命令行工具</p><p>​         可以使用gitbash,直接在文件夹里右键→git bash</p><p>​        也可以使用cmd,在文件夹地址栏输入cmd回车</p><p>2.创建并初始化一个存放博客代码的文件夹</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> init 文件夹名字<br></code></pre></td></tr></table></figure><p>3.进入这个文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd 文件夹名字<br></code></pre></td></tr></table></figure></li><li><p>进入你要建博客的文件夹</p><p>1.创建一个存放博客代码的文件夹，并进入文件夹</p><p>2.打开命令行工具</p><p>3.初始化</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> init<br></code></pre></td></tr></table></figure></li></ul><p><strong>2.安装依赖</strong></p><p>进入你已经创建的存放博客代码的文件夹</p><p>然后，安装一些依赖：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npm</span> install<br></code></pre></td></tr></table></figure><h2 id="2-新建文章"><a href="#2-新建文章" class="headerlink" title="2 新建文章"></a>2 新建文章</h2><h3 id="2-1-新建文章"><a href="#2-1-新建文章" class="headerlink" title="2.1 新建文章"></a>2.1 新建文章</h3><p>现在先不用管博客美化的问题，现在的第一件事情是可以看到也就是在浏览器可以预览到自己的博客，并且能推送到GitHub/Gitee上并且能访问到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;文章名&quot;<br></code></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fyAnAJ"><img src="https://z3.ax1x.com/2021/08/14/fyAnAJ.png" alt="fyAnAJ.png"></a></p><p>创建完毕，成功之后会告诉你已经在_post文件夹下创建好了。打开看一下，里边的helloworld是默认就有的，你可以先不用管，不想看可以直接删了。</p><p><a href="https://imgtu.com/i/fyAQ91"><img src="https://z3.ax1x.com/2021/08/14/fyAQ91.png" alt="fyAQ91.png"></a></p><p>打开你新建的文件给它写几句内容。你不想写可以先不写。</p><p><a href="https://imgtu.com/i/fyAUNd"><img src="https://z3.ax1x.com/2021/08/14/fyAUNd.png" alt="fyAUNd.png"></a></p><p>tags：最好填写自己的标签分类</p><h3 id="2-2-生成静态页面"><a href="#2-2-生成静态页面" class="headerlink" title="2.2 生成静态页面"></a>2.2 生成静态页面</h3><p>刚才你所创建的文件以及写入的内容均在一个文本文档里面，这一步就是将你的文本文件解析为静态网页。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo generate# 生成静态网页<br></code></pre></td></tr></table></figure><h3 id="2-3-本地预览"><a href="#2-3-本地预览" class="headerlink" title="2.3 本地预览"></a>2.3 本地预览</h3><p>如果你不想在本地看一下是什么效果，可以跳过这一步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean# 清理一下<br>hexo server# 启动本地服务<br></code></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fyEF5d"><img src="https://z3.ax1x.com/2021/08/14/fyEF5d.png" alt="fyEF5d.png"></a></p><p>注意不要关闭命令工具，不要按Ctrl + C，在浏览器输入提示你的地址你就可以看到页面了，看完之后不需要了，你可以回到命令工具，按Ctrl + C停止后台服务。</p><h2 id="3-部署到GitHub-Gitee"><a href="#3-部署到GitHub-Gitee" class="headerlink" title="3 部署到GitHub/Gitee"></a>3 部署到GitHub/Gitee</h2><h3 id="3-1-下载hexo-deployer-git"><a href="#3-1-下载hexo-deployer-git" class="headerlink" title="3.1 下载hexo-deployer-git"></a>3.1 下载hexo-deployer-git</h3><p>使用github的也知道，本地上传文件给远程仓库是需要添加remote，然后自己add commit push等等。但是使用hexo就不用管这些了。hexo可以帮你完成这些繁琐的工作。<br>首先你要下载一个帮你完成工作的工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="3-2-Github仓库"><a href="#3-2-Github仓库" class="headerlink" title="3.2 Github仓库"></a>3.2 Github仓库</h3><p>确定你的github已经配置好SSH秘钥了。<br>在github新建一个仓库，取名用户名.github.io，其实你可以不叫这个，随便取一个的。<br>区别在于，如果你使用用户名.github.io，那你的页面访问的时候就是https://用户名.github.io，你要是随便取一个，那就是https://用户名.github.io/仓库名/。<br>建好仓库之后进去，复制SSH链接，记住是SSH链接不是https链接，否则部署时候会失败。</p><p><a href="https://imgtu.com/i/fyE5id"><img src="https://z3.ax1x.com/2021/08/14/fyE5id.png" alt="fyE5id.png"></a></p><h3 id="3-3-Gitee仓库"><a href="#3-3-Gitee仓库" class="headerlink" title="3.3 Gitee仓库"></a>3.3 Gitee仓库</h3><p>确定你的gitee已经配置好SSH秘钥了。<br>在gitee新建一个仓库，取名用户名.gitee.io，其实你可以不叫这个，随便取一个的。<br>区别在于，如果你使用用户名.gitee.io，那你的页面访问的时候就是https://用户名.gitee.io，你要是随便取一个，那就是https://用户名.gitee.io/仓库名/。<br>建好仓库之后进去，复制SSH链接，记住是SSH链接不是https链接，否则部署时候会失败。</p><p><a href="https://imgtu.com/i/fyVUSI"><img src="https://z3.ax1x.com/2021/08/14/fyVUSI.png" alt="fyVUSI.png"></a></p><h3 id="3-4-修改-config-yml"><a href="#3-4-修改-config-yml" class="headerlink" title="3.4 修改_config.yml"></a>3.4 修改_config.yml</h3><p>回到你的博客文件夹，找到<code>_config.yml</code>文件，对其进行修改。用记事本打开，拉到最底下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 只推送到github</span><br>deploy:<br>  type: git<br>  repo: 你刚才复制的<br>  branch: main #因为黑人运动主分支已经不叫master<br><span class="hljs-meta">#</span><span class="bash"> 只推动到gitee</span><br>deploy:<br>  type: git<br>  repo: 你刚才复制的<br>  branch: master<br></code></pre></td></tr></table></figure><p>如果你只推送道github，你就按我给的代码写。如果你想同时部署到多个仓库，那你就按我下面里的写冒号是英文的，冒号后边有一个空格。注意格式否则会部署失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: <br>  github: 你刚才复制的ssh地址<br>  gitee: git@gitee.com:gao_tengfei/gao_tengfei.gitee.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h3 id="3-5-部署"><a href="#3-5-部署" class="headerlink" title="3.5 部署"></a>3.5 部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><p>如果你部署失败了……那应该是你的node版本太新了……卸载从头再来。<br>部署完成之后你的github/gtiee仓库里就有东西啦。</p><h3 id="3-6-Github设置"><a href="#3-6-Github设置" class="headerlink" title="3.6 Github设置"></a>3.6 Github设置</h3><p><a href="https://imgtu.com/i/fyeGRA"><img src="https://z3.ax1x.com/2021/08/14/fyeGRA.png" alt="fyeGRA.png"></a></p><p>如果，你只向github推送，那么左上角分支那选择main就可以，如果你既向github又向gitee推送，这个时候你的分支要选择master才会有内容，然后点击右上角Settings，进入设置</p><p><a href="https://imgtu.com/i/fyesRs"><img src="https://z3.ax1x.com/2021/08/14/fyesRs.png" alt="fyesRs.png"></a></p><p>然后选择左下角Pages</p><p><a href="https://imgtu.com/i/fyeWZT"><img src="https://z3.ax1x.com/2021/08/14/fyeWZT.png" alt="fyeWZT.png"></a></p><p>然后中间Your site is published at xxxxx，那个链接就是你的博客链接啦。</p><p>下面Source处，如果只想github推送，选择main分支即可，否则选择master分支。</p><h3 id="3-7-Gitee设置"><a href="#3-7-Gitee设置" class="headerlink" title="3.7 Gitee设置"></a>3.7 Gitee设置</h3><p><a href="https://imgtu.com/i/fymYY4"><img src="https://z3.ax1x.com/2021/08/14/fymYY4.png" alt="fymYY4.png"></a></p><p>选择服务</p><p><a href="https://imgtu.com/i/fymfXt"><img src="https://z3.ax1x.com/2021/08/14/fymfXt.png" alt="fymfXt.png"></a></p><p>选择Gitee Pages，进去之后，现在是需要实名认证，然后就可以开通</p><h2 id="4-更换主题以及美化"><a href="#4-更换主题以及美化" class="headerlink" title="4 更换主题以及美化"></a>4 更换主题以及美化</h2><p>下一篇文章在介绍</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客类技术文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本使用</title>
    <link href="/2021/08/13/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/13/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Git基本使用"><a href="#Git基本使用" class="headerlink" title="Git基本使用"></a>Git基本使用</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="命令行软件"><a href="#命令行软件" class="headerlink" title="命令行软件:"></a>命令行软件:</h3><p>Ubuntu：参考：<a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git <br></code></pre></td></tr></table></figure><p>Windows：<a href="https://git-scm.com/">https://git-scm.com/</a> 下载安装即可<br>可通过以下命令确认是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git --version<br></code></pre></td></tr></table></figure><h3 id="界面管理软件："><a href="#界面管理软件：" class="headerlink" title="界面管理软件："></a>界面管理软件：</h3><p>Ubuntu：<strong>SmartGit</strong><br>Windows：<strong>git tortoise</strong>：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a><br>clion\pycharm：内置了Git管理工具</p><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><p>初始化git仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>实时查看当前仓库状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>配置邮箱和用户名：（整个系统只用配置一次）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.email &quot;xxx@xx.com&quot;<br>git config --global user.name &quot;xxxx&quot;<br></code></pre></td></tr></table></figure><p>将文件变化加入到State舞台（所有文件的增删改）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>将文件变化加入到State舞台（个别文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add 文件名<br></code></pre></td></tr></table></figure><p>提交Stage舞台上的所有变化（所有文件的增删改）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;提交注释&quot;<br></code></pre></td></tr></table></figure><p>查看历史记录：（按q退出）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><p><strong>文件状态说明</strong><br><em><strong>Untracked</strong></em>：未追踪状态（git add . 更新为staged）常见于新添加的文件或目录<br><em><strong>not staged</strong></em>：未记录的变换（git add . 更新为staged）常见于修改、删除文件<br><em><strong>Staged</strong></em>：待提交状态（需要通过 git commit -m “提交注释”）将之提交<br><em><strong>Commited</strong></em>：文件已提交到版本库，会在历史记录中体现<br><img src="https://img-blog.csdnimg.cn/bd3f4dbc69804962b76c6ba57c1de9a7.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyODU0OTU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><p><strong>gitee, github</strong></p><h3 id="远程仓库初始化及push"><a href="#远程仓库初始化及push" class="headerlink" title="远程仓库初始化及push"></a>远程仓库初始化及push</h3><p>1.创建远程仓库<br>2.添加远程仓库的链接，命名为origin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin https://gitee.com/xxx/xxx<br></code></pre></td></tr></table></figure><p>3.将当前分支和远端origin的master进行关联（只需要执行一次）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push --set-upstream origin master<br></code></pre></td></tr></table></figure><p>也可以使用指定的远端分支进行推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin main<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7b10ada9c2424c05a03e5e958ca5f85e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyODU0OTU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="获取远程仓库代码pull"><a href="#获取远程仓库代码pull" class="headerlink" title="获取远程仓库代码pull"></a>获取远程仓库代码pull</h3><p>1.获取已有的远程仓库代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitee.com/xxx/xxx<br></code></pre></td></tr></table></figure><p>2.如果希望获取最新的远程的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull<br></code></pre></td></tr></table></figure><p>3.等同于</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git fetch + git merge<br></code></pre></td></tr></table></figure><h2 id="多人协作开发"><a href="#多人协作开发" class="headerlink" title="多人协作开发"></a>多人协作开发</h2><p>commit、push<br>pull、merge</p><h3 id="冲突产生"><a href="#冲突产生" class="headerlink" title="冲突产生"></a>冲突产生</h3><p>在push之前，远程版本库中有新的提交，本地没有，执行pull，发现其中的新的提交和本地的内容（相同文件的相同行）有差异。产生冲突</p><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><p>git pull 拉取并合并<br>手动，使用界面工具将远程内容和本地内容进行合理的编排，执行命令继续合并过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>fix conflicts and then run “git rebase –continue”<br>执行推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push<br></code></pre></td></tr></table></figure><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><p>查看分支（*处于当前所在分支前面）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch 新建分支名称<br></code></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout 分支名称<br></code></pre></td></tr></table></figure><p>同时创建并切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b 新建分支名称<br></code></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d 删除分支名称<br></code></pre></td></tr></table></figure><p>分支合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge<br>-------<br>git checkout 需要合并到的分支（一会会将别的分支的内容合并到此分支）<br>git merge 需要合并的分支（将此分支内容合并到当前分支）<br></code></pre></td></tr></table></figure><h2 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h2><p>创建标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a 是创建一个带注释的标签，建议使用<br>git tag -a v1.0<br></code></pre></td></tr></table></figure><p>查看标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag<br></code></pre></td></tr></table></figure><p>删除标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag -d 标签名称<br></code></pre></td></tr></table></figure><p>查看此版本所修改内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git show 标签名称<br></code></pre></td></tr></table></figure><h2 id="Git-版本回退"><a href="#Git-版本回退" class="headerlink" title="Git 版本回退"></a>Git 版本回退</h2><p>查看提交日志,每一次提交都有对应的 *<strong>commit id*</strong> 和 ***commit message***。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br><span class="hljs-meta">#</span><span class="bash"> 提交的信息会在一行显示</span><br>git log --pretty=oneline<br></code></pre></td></tr></table></figure><p>根据id会退到指定的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard id(根据日志，可以查看到id号)<br></code></pre></td></tr></table></figure><p>查看命令操作的历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>生产工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
